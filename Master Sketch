// include SPI, MP3 and SD libraries
#include <SPI.h>
#include <Adafruit_VS1053.h>
#include <SD.h>

// define the pins used
//#define CLK 13       // SPI Clock, shared with SD card
//#define MISO 12      // Input data, from VS1053/SD card
//#define MOSI 11      // Output data, to VS1053/SD card
// Connect CLK, MISO and MOSI to hardware SPI pins. 
// See http://arduino.cc/en/Reference/SPI "Connections"

// These are the pins used for the breakout example
#define BREAKOUT_RESET  9      // VS1053 reset pin (output)
#define BREAKOUT_CS     10     // VS1053 chip select pin (output)
#define BREAKOUT_DCS    8      // VS1053 Data/command select pin (output)
// These are the pins used for the music maker shield
#define SHIELD_RESET  -1      // VS1053 reset pin (unused!)
#define SHIELD_CS     7      // VS1053 chip select pin (output)
#define SHIELD_DCS    6      // VS1053 Data/command select pin (output)

// These are common pins between breakout and shield
#define CARDCS 4     // Card chip select pin
// DREQ should be an Int pin, see http://arduino.cc/en/Reference/attachInterrupt
#define DREQ 3       // VS1053 Data request, ideally an Interrupt pin

Adafruit_VS1053_FilePlayer musicPlayer = 
  // create breakout-example object!
 // Adafruit_VS1053_FilePlayer(BREAKOUT_RESET, BREAKOUT_CS, BREAKOUT_DCS, DREQ, CARDCS);
  // create shield-example object!
  Adafruit_VS1053_FilePlayer(SHIELD_RESET,SHIELD_CS, SHIELD_DCS, DREQ, CARDCS);
  
void setup() {
  Serial.begin(9600);

  if (! musicPlayer.begin()) { // initialise the music player
     Serial.println(F("Couldn't find VS1053, do you have the right pins defined?"));
     while (1);
  }
  Serial.println(F("VS1053 found"));
  
  musicPlayer.sineTest(0x44, 500); 
  
  SD.begin(CARDCS);    // initialise the SD card
// if (!SD.begin(CARDCS)) {
// Serial.println(F("SD failed, or not present"));
// while (1);  // don't do anything more
//  }
//  Serial.println("SD OK!");
  
  // list files
 // printDirectory(SD.open("/"), 0);
  
  // Set volume for left, right channels. lower numbers == louder volume!
  musicPlayer.setVolume(20,20);

  // If DREQ is on an interrupt pin (on uno, #2 or #3) we can do background
  // audio playing
  musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT);  // DREQ int
  
  // Play one file, don't return until complete
//  Serial.println(F("Playing track 001"));
//  musicPlayer.playFullFile("track001.wav");
  // Play another file in the background, REQUIRES interrupts!
Serial.println(F("Playing track 001"));
musicPlayer.startPlayingFile("track001.wav");
}

void loop() {
  
  for (uint8_t i=0; i<8; i++) { //initializes all GIO pins as inputs for muscle present sensors
    musicPlayer.GPIO_pinMode(i, INPUT_PULLUP);  
  }
  motionDetect(); //Calls function to check flex sensors for motion...should only check the sensors with corresponding muscles attached
  
  // File is playing in the background
  if (musicPlayer.stopped()) {
    Serial.println("Done playing music");
    while (1);
  }
  if (Serial.available()) {
    char c = Serial.read();
    
    // if we get an 's' on the serial console, stop!
    if (c == 's') {
      musicPlayer.stopPlaying();
    }
    
    // if we get an 'p' on the serial console, pause/unpause!
    if (c == 'p') {
      if (! musicPlayer.paused()) {
        Serial.println("Paused");
        musicPlayer.pausePlaying(true);
      } else { 
        Serial.println("Resumed");
        musicPlayer.pausePlaying(false);
      }
    }
  }

  delay(100);
}
///*Global Variables*/
//
//int rBicep = 0; //right Bicep muscle input pin
//int rTricep = 1; //right Tricep input pin
//int lBicep = 2; //
//int lTricep = 3; //
//int rQuad = 4; //
//int rHam = 7; //
//int lQuad = 8; //
//int lHam = 12; //
//
//int rArmSpeakerPin = 5; //Assign right arm speaker to pin 5
//int lArmSpeakerPin = 6;
//int rLegSpeakerPin = 9;
//int lLegSpeakerPin = 10;
//
//int buffer; //controls sensitivity of flex sensors
//
////the setup routine runs once when you press reset
//void setup() {
//  //initialize serial communication at 9600 bits per second:
//  Serial.begin(9600);
//  pinMode(rBicep, INPUT_PULLUP);
//  pinMode(rTricep, INPUT_PULLUP);
//  pinMode(lBicep, INPUT_PULLUP);
//  pinMode(lTricep, INPUT_PULLUP);
//  pinMode(rQuad, INPUT_PULLUP);
//  pinMode(rHam, INPUT_PULLUP);
//  pinMode(lQuad, INPUT_PULLUP);
//  pinMode(lHam, INPUT_PULLUP);
//  
//  pinMode(rArmSpeakerPin, OUTPUT); //assigns right arm speaker pin as an output
//  pinMode(lArmSpeakerPin, OUTPUT);
//  pinMode(rLegSpeakerPin, OUTPUT);
//  pinMode(lLegSpeakerPin, OUTPUT);
//  pinMode(bigSpeakerPin, OUTPUT);
//}
//
//int rArmFlex = analogRead(A0); //initializes Arm flex value to current voltage from flex sensor
//int lArmFlex = analogRead(A1);
//int rLegFlex = analogRead(A2);
//int lLegFlex = analogRead(A3);
void motionDetect() {
  delay(150); //delay in between read for stability
  rightArmMotionDetect(); //Call function to detect motion in right Arm
  leftArmMotionDetect();
  rightLegMotionDetect();
  leftLegMotionDetect();
  
}

void rightArmMotionDetect(){  //This function checks if there is significant motion of the arm flex sensor, and outputs a different tone for extension/contraction
  if (analogRead(A0) > (rArmFlex+buffer)){
  Serial.println("Bicep");
  tone(rArmSpeakerPin, 600,100); //play "Bicep beep from right arm speaker.
  
} else if (analogRead(A0) < rArmFlex+buffer) { 
  Serial.println("Tricep");
  tone(rArmSpeakerPin,750,100);
}  else{  //if no significant motion is sensed, no sound is made)
  }
  rArmFlex=analogRead(A0);
}
  
void leftArmMotionDetect(){  //This function checks if there is significant motion of the arm flex sensor, and outputs a different tone for extension/contraction
  if (analogRead(A1) > (lArmFlex+buffer)){
  Serial.println("Bicep");
  tone(lArmSpeakerPin, 600,100); //play "Bicep beep from right arm speaker.
  
} else if (analogRead(A0) < lArmFlex+buffer) {
  Serial.println("Tricep");
  tone(lArmSpeakerPin,750,100);
} else {  //if no significant motion is sensed, no sound is made)
  Serial.println("Chillen");
   }
  lArmFlex=analogRead(A1);
}
  
void rightLegMotionDetect(){  //This function checks if there is significant motion of the arm flex sensor, and outputs a different tone for extension/contraction
  if (analogRead(A2) > (rLegFlex+buffer)){
  Serial.println("Quad");
  tone(rLegSpeakerPin, 200,100); //play "Bicep beep from right arm speaker.
  
} else if (analogRead(A2) < rLegFlex+buffer) {
  Serial.println("Hamstring");
  tone(rLegSpeakerPin,200,100);
}  else {  //if no significant motion is sensed, no sound is made)
   Serial.println("Chillen");
}
  rLegFlex=analogRead(A2);
}

void leftLegMotionDetect(){  //This function checks if there is significant motion of the arm flex sensor, and outputs a different tone for extension/contraction
  if (analogRead(A3) > (lLegFlex+buffer)){
  Serial.println("Quad");
  tone(lLegSpeakerPin, 200,100); //play "Bicep beep from right arm speaker.
  
} else if (analogRead(A3) < lLegFlex+buffer) {
  Serial.println("Hamstring");
  tone(lLegSpeakerPin,200,100);
}  else{  //if no significant motion is sensed, no sound is made)
  }
  rLegFlex=analogRead(A3);
}
